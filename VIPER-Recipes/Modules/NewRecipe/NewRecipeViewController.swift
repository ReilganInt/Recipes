//
//  NewRecipeViewController.swift
//  VIPER-Recipes
//
//  Created admin on 19.02.2020.
//  Copyright © 2020 Rinat Kutuev. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import SnapKit
import CoreData

protocol NewRecipeViewControllerDelegate {
    func didAddNewRecipe()
}
enum NewRecipeType {
    case time
    case degree
    case portion
    case `default`
}

class NewRecipeViewController: UIViewController, NewRecipeViewProtocol {

	var presenter: NewRecipePresenterProtocol?
    
    lazy var recipeImageView: UIImageView = {
        let iv = UIImageView()
        iv.contentMode = .scaleAspectFill
        iv.image = #imageLiteral(resourceName: "select").withRenderingMode(.alwaysOriginal)
        iv.layer.masksToBounds = true
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(didChangeRecipeImageView))

        iv.addGestureRecognizer(tapGestureRecognizer)
        iv.isUserInteractionEnabled = true
        return iv
    }()
    
    var pickerArray: [String] = []
    var currentPicker: NewRecipeType = .default
    
    let nameTextField: UITextField = TextField()
    
    let timePickerCell: UITableViewCell = UITableViewCell(style: .value1, reuseIdentifier: nil)
    let degreePickerCell: UITableViewCell = UITableViewCell(style: .value1, reuseIdentifier: nil)
    let portionPickerCell: UITableViewCell = UITableViewCell(style: .value1, reuseIdentifier: nil)
    
    override func loadView() {
        super.loadView()
        setup()
        
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        let saveButton = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveRecipe))
        let backButton = UIBarButtonItem(barButtonSystemItem: .cancel , target: self, action: #selector(back))
        navigationItem.rightBarButtonItem = saveButton
        navigationItem.leftBarButtonItem = backButton
        view.backgroundColor = .white
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let navigationBarHeight = UIApplication.shared.statusBarFrame.size.height +
        (navigationController?.navigationBar.frame.height ?? 0.0)
        
        recipeImageView.snp.makeConstraints({ make in
            make.width.equalTo(view.bounds.width)
            make.height.equalTo(200)
            make.left.equalTo(0)
            make.top.equalTo(navigationBarHeight)
        })
        
        nameTextField.snp.makeConstraints({ make in
            make.width.equalTo(view.bounds.width - 40)
            make.centerX.equalToSuperview()
            make.height.equalTo(50)
            make.top.equalTo(recipeImageView.snp.bottom)
        })
        
        timePickerCell.snp.makeConstraints({ make in
            make.width.equalTo((view.bounds.width - 40) / 3)
            make.height.equalTo(50)
            make.top.equalTo(nameTextField.snp.bottom)
            make.left.equalTo(20)
        })
        
        degreePickerCell.snp.makeConstraints({ make in
            make.width.equalTo((view.bounds.width - 40) / 3)
            make.height.equalTo(50)
            make.top.equalTo(nameTextField.snp.bottom)
            make.centerX.equalToSuperview()
        })
        
        portionPickerCell.snp.makeConstraints({ make in
            make.width.equalTo((view.bounds.width - 40) / 3)
            make.height.equalTo(50)
            make.top.equalTo(nameTextField.snp.bottom)
            make.right.equalTo(-20)
        })
    }
    
    private func setup() {
        setupImageView()
        setupNameTextField()
        setupTimePickerCell()
        setupDegreePickerCell()
        setupPortionPickerCell()
    }
    
    private func setupImageView() {
        view.addSubview(recipeImageView)
    }
    
    @objc private func didChangeRecipeImageView() {
        print("didChangeRecipeImageView")
        showImagePickerControllerActionSheet()
    }
    
    private func setupNameTextField() {
        view.addSubview(nameTextField)
        
        nameTextField.placeholder = "Recipe name"
        // Add new font, color
    }
    
    private func setupTimePickerCell() {
        view.addSubview(timePickerCell)
        
        timePickerCell.textLabel?.text = "time"
        timePickerCell.detailTextLabel?.text = "15"
        timePickerCell.accessoryType = .disclosureIndicator
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(didChangeTimePickerCell))
        timePickerCell.addGestureRecognizer(tapGestureRecognizer)
    }
    
    @objc private func didChangeTimePickerCell() {
        showPickerController(for: .time)
    }
    
    private func setupDegreePickerCell() {
        view.addSubview(degreePickerCell)
        
        degreePickerCell.textLabel?.text = "°C"
        degreePickerCell.detailTextLabel?.text = "150"
        degreePickerCell.accessoryType = .disclosureIndicator
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(didChangeDegreePickerCellPickerCell))
        degreePickerCell.addGestureRecognizer(tapGestureRecognizer)
    }
    
    @objc private func didChangeDegreePickerCellPickerCell() {
        showPickerController(for: .degree)
    }
    
    private func setupPortionPickerCell() {
        view.addSubview(portionPickerCell)
        
        portionPickerCell.textLabel?.text = "Portion"
        portionPickerCell.detailTextLabel?.text = "2"
        portionPickerCell.accessoryType = .disclosureIndicator
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(didChangePortionPickerCellPickerCell))
        portionPickerCell.addGestureRecognizer(tapGestureRecognizer)
    }
    
    @objc private func didChangePortionPickerCellPickerCell() {
        showPickerController(for: .portion)
    }
    
    @objc private func saveRecipe() {
//        var array: [Recipe] = []
        
//        DataCoordinator.getAllRecipes(comletionHandler: {(result) in
//            switch result {
//            case .success(let data):
//                print(data)
//                array = data
//            case .failure(let error):
//                print(error.localizedDescription)
//            }
//        })
        
        let name = self.nameTextField.text
        DataCoordinator.performBackgroundTask { (context) -> (Void) in
            let obj = Recipe(context: context)
            obj.name = name
            obj.stars = Int32.random(in: 0..<5)
            do {
                print(context.hasChanges)
//                for item in array {
//                    context.delete(item)
//                }
                try context.save()
                print("saved changes")
            } catch {
                print("exception saving in background thread")
            }
        }
        // delegate.didAddNewRecipe() reload data
        dismiss(animated: true)
    }
    
    @objc private func back() {
        DataCoordinator.getAllRecipes { (result) in
            switch result {
            case .success(let data):
                print(data)
                
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
        dismiss(animated: true)
    }

}


extension NewRecipeViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    func showImagePickerControllerActionSheet() {
        let photoLibraryAction = UIAlertAction(title: "Choose from Library", style: .default) { _ in
            self.showImagePickerController(sourceType: .photoLibrary)
        }
        
        let cameraAction = UIAlertAction(title: "Take from Camera", style: .default) { _ in
            self.showImagePickerController(sourceType: .camera)
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        AlertService.showAlert(style: .actionSheet, title: "Choose your image", message: nil, actions: [photoLibraryAction, cameraAction, cancelAction], completion: nil)
    }
    
    func showImagePickerController(sourceType: UIImagePickerController.SourceType) {
        let imagePickerController = UIImagePickerController()
        imagePickerController.delegate = self
        imagePickerController.allowsEditing = true
        imagePickerController.sourceType = sourceType
        present(imagePickerController, animated: true)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        
        if let editedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage {
            recipeImageView.image = editedImage
        } else if let originalImage = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
            recipeImageView.image = originalImage
        }
        dismiss(animated: true)
        
    }
}

extension NewRecipeViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return pickerArray.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return pickerArray[row]
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        switch currentPicker {
        case .time:
            timePickerCell.detailTextLabel?.text = pickerArray[row]
        case .degree:
            degreePickerCell.detailTextLabel?.text = pickerArray[row]
        case .portion:
            portionPickerCell.detailTextLabel?.text = pickerArray[row]
        case .default:
            break
        }
    }
    
    func showPickerController(for type: NewRecipeType) {
        let pickerView = UIPickerView()
        pickerView.delegate = self
        pickerView.dataSource = self
        
        switch type {
        case .time:
            pickerArray = []
            for value in 15...300 {
                if value % 5 == 0 {
                    pickerArray.append(String(value))
                }
            }
            AlertService.showPicker(style: .actionSheet, title: "Change time", message: "", actions: [UIAlertAction(title: "Ok", style: .cancel, handler: nil)], pickerView: pickerView, completion: {
                self.currentPicker = .time
            })
        case .degree:
            pickerArray = []
            for value in 50...300 {
                if value % 10 == 0 {
                    pickerArray.append(String(value))
                }
            }
            AlertService.showPicker(style: .actionSheet, title: "Change degree", message: "", actions: [UIAlertAction(title: "Ok", style: .cancel, handler: nil)], pickerView: pickerView, completion: {
                self.currentPicker = .degree
            })
        case .portion:
            pickerArray = []
            for value in 1...15 {
                pickerArray.append(String(value))
            }
            AlertService.showPicker(style: .actionSheet, title: "Change portions", message: "", actions: [UIAlertAction(title: "Ok", style: .cancel, handler: nil)], pickerView: pickerView, completion: {
                self.currentPicker = .portion
            })
        case .default:
            break
        }
    }
}
